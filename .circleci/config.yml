version: 2.1

orbs:
  windows: circleci/windows@5.0

commands:
  check_windows:
    description: "Runs cargo check on Windows"
    parameters:
      workspace_member:
        type: string
    steps:
      - checkout
      - restore_cache:
          key: cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: "Install Rust and run cargo check"
          command: |
            $ProgressPreference = "SilentlyContinue"
            # Remove the circleci installed rustc.
            choco uninstall rust
            # Install rust with rustup.
            Invoke-WebRequest -Uri "https://win.rustup.rs/" -OutFile "C:\rustup-init.exe"
            & C:\rustup-init.exe -y --default-toolchain "stable-x86_64-pc-windows-msvc" --no-modify-path --profile minimal
            $Env:Path += ";$Env:USERPROFILE\.cargo\bin"
            # Verify the installation.
            cargo --version --verbose
            rustc --version | Out-File -FilePath "rust-version"
            if (!(Test-Path "Cargo.lock" -PathType Leaf)) {
                cargo generate-lockfile
            }
            cd << parameters.workspace_member >>
            cargo check --examples --benches --tests
      - save_cache:
          paths:
            - C:\Users\circleci\.cargo\registry
            - C:\Users\circleci\.cargo\git
            - target
          key: cargo-cache-{{ arch }}-{{ checksum "rust-version" }}-{{ checksum "Cargo.lock" }}

  setup_environment:
    description: "Setup testing environment"
    parameters:
      cache_key:
        type: string
        default: snarkvm-stable-cache
    steps:
      - run: set -e
      - setup_remote_docker
      - run:
          name: Prepare environment and install dependencies
          command: |
            export SCCACHE_CACHE_SIZE=200M
            export WORK_DIR="$CIRCLE_WORKING_DIRECTORY/.cache/sccache"
            export SCCACHE_DIR="$CIRCLE_WORKING_DIRECTORY/.cache/sccache"
            mkdir -p "$CIRCLE_WORKING_DIRECTORY/.bin"
            wget https://github.com/mozilla/sccache/releases/download/v0.3.0/sccache-v0.3.0-x86_64-unknown-linux-musl.tar.gz
            tar -C "$CIRCLE_WORKING_DIRECTORY/.bin" -xvf sccache-v0.3.0-x86_64-unknown-linux-musl.tar.gz
            mv $CIRCLE_WORKING_DIRECTORY/.bin/sccache-v0.3.0-x86_64-unknown-linux-musl/sccache $CIRCLE_WORKING_DIRECTORY/.bin/sccache
            export PATH="$PATH:$CIRCLE_WORKING_DIRECTORY/.bin"
            export RUSTC_WRAPPER="sccache"
            rm -rf "$CIRCLE_WORKING_DIRECTORY/.cargo/registry"
            DEBIAN_FRONTEND=noninteractive sudo apt-get update
            DEBIAN_FRONTEND=noninteractive sudo apt-get dist-upgrade -y -o DPkg::Options::=--force-confold
            DEBIAN_FRONTEND=noninteractive sudo apt-get install -y --no-install-recommends clang llvm-dev llvm pkg-config xz-utils make libssl-dev libssl-dev
      - restore_cache:
          keys:
            - << parameters.cache_key >>

  clear_environment:
    description: "Clear environment"
    parameters:
      cache_key:
        type: string
        default: snarkvm-stable-cache
    steps:
      - run: (sccache -s||true)
      - run: set +e
      - save_cache:
          key: << parameters.cache_key >>
          paths:
            - .cache/sccache
            - .cargo

  run_serial:
    description: "Build and run tests"
    parameters:
      workspace_member:
        type: string
      cache_key:
        type: string
      flags:
        type: string
        default: ""
    steps:
      - checkout
      - setup_environment:
          cache_key: << parameters.cache_key >>
      - run:
          no_output_timeout: 60m
          command: cd << parameters.workspace_member >> && RUST_MIN_STACK=67108864 cargo test << parameters.flags >>
      - clear_environment:
          cache_key: << parameters.cache_key >>

  run_parallel:
    description: "Build and run tests (in parallel)"
    parameters:
      workspace_member:
        type: string
      cache_key:
        type: string
      flags:
        type: string
        default: ""
    steps:
      - checkout
      - setup_environment:
          cache_key: << parameters.cache_key >>
      - run:
          no_output_timeout: 60m
          command: |
            cd << parameters.workspace_member >>
            cargo test -- --list --format terse | sed 's/: test//' > test_names.txt
            TEST_NAMES=$(circleci tests split test_names.txt)
            for i in $(echo $TEST_NAMES | sed "s/ / /g")
            do
                RUST_MIN_STACK=67108864 cargo test $i << parameters.flags >>
            done
      - clear_environment:
          cache_key: << parameters.cache_key >>

  install_rust_nightly:
    description: "Install Rust nightly toolchain"
    steps:
      - run: rustup toolchain install nightly-x86_64-unknown-linux-gnu

jobs:
  snarkvm:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - checkout
      - run:
          no_output_timeout: 30m
          command: RUST_MIN_STACK=67108864 cargo test

  algorithms:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          workspace_member: algorithms
          cache_key: snarkvm-algorithms-cache

  algorithms-profiler:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial: # This runs a single test with profiler enabled
          workspace_member: algorithms
          cache_key: snarkvm-algorithms-cache
          flags: varuna::prove_and_verify_with_square_matrix --features profiler

  circuit:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: circuit
          cache_key: snarkvm-circuit-cache

  circuit-account:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: circuit/account
          cache_key: snarkvm-circuit-account-cache

  # This checks that no `console` structs are used in core circuit logic.
  circuit-account-noconsole:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: circuit/account
          flags: --no-default-features
          cache_key: snarkvm-circuit-account-noconsole-cache

  circuit-algorithms:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: circuit/algorithms
          cache_key: snarkvm-circuit-algorithms-cache

  circuit-collections:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: circuit/collections
          cache_key: snarkvm-circuit-collections-cache

  # This checks that no `console` structs are used in core circuit logic.
  circuit-collections-noconsole:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: circuit/collections
          flags: --no-default-features
          cache_key: snarkvm-circuit-collections-noconsole-cache

  circuit-environment:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: circuit/environment
          cache_key: snarkvm-circuit-environment-cache

  circuit-network:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: circuit/network
          cache_key: snarkvm-circuit-network-cache

  circuit-program:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: circuit/program
          cache_key: snarkvm-circuit-program-cache

  circuit-types:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: circuit/types
          cache_key: snarkvm-circuit-types-cache

  circuit-types-address:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: circuit/types/address
          cache_key: snarkvm-circuit-types-address-cache

  circuit-types-boolean:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: circuit/types/boolean
          cache_key: snarkvm-circuit-types-boolean-cache

  circuit-types-field:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: circuit/types/field
          cache_key: snarkvm-circuit-types-field-cache

  circuit-types-group:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: circuit/types/group
          cache_key: snarkvm-circuit-types-group-cache

  circuit-types-integers:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          workspace_member: circuit/types/integers
          cache_key: snarkvm-circuit-types-integers-cache
          flags: -- --ignored

  circuit-types-scalar:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: circuit/types/scalar
          cache_key: snarkvm-circuit-types-scalar-cache

  circuit-types-string:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: circuit/types/string
          cache_key: snarkvm-circuit-types-string-cache
  console:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: console
          cache_key: snarkvm-console-cache

  console-account:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: console/account
          cache_key: snarkvm-console-account-cache

  console-algorithms:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: console/algorithms
          cache_key: snarkvm-console-algorithms-cache

  console-collections:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: console/collections
          cache_key: snarkvm-console-collections-cache

  console-network:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: console/network
          cache_key: snarkvm-console-network-cache

  console-network-environment:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: console/network/environment
          cache_key: snarkvm-console-network-environment-cache

  console-program:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: console/program
          cache_key: snarkvm-console-program-cache

  console-types:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: console/types
          cache_key: snarkvm-console-types-cache

  console-types-address:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: console/types/address
          cache_key: snarkvm-console-types-address-cache

  console-types-boolean:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: console/types/boolean
          cache_key: snarkvm-console-types-boolean-cache

  console-types-field:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: console/types/field
          cache_key: snarkvm-console-types-field-cache

  console-types-group:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: console/types/group
          cache_key: snarkvm-console-types-group-cache

  console-types-integers:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: console/types/integers
          cache_key: snarkvm-console-types-integers-cache

  console-types-scalar:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: console/types/scalar
          cache_key: snarkvm-console-types-scalar-cache

  console-types-string:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: console/types/string
          cache_key: snarkvm-console-types-string-cache

  curves:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: curves
          cache_key: snarkvm-curves-cache

  fields:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: fields
          cache_key: snarkvm-fields-cache

  ledger:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          workspace_member: ledger
          cache_key: snarkvm-ledger-cache

  ledger-with-rocksdb:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          flags: --features=rocks
          workspace_member: ledger
          cache_key: snarkvm-ledger-with-rocksdb-cache

  ledger-with-valid-solutions:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          flags: valid_solutions --features=test
          workspace_member: ledger
          cache_key: snarkvm-ledger-with-valid-solutions-cache

  ledger-authority:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          workspace_member: ledger/authority
          cache_key: snarkvm-ledger-authority-cache

  ledger-block:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          workspace_member: ledger/block
          cache_key: snarkvm-ledger-block-cache

  ledger-committee:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: ledger/committee
          cache_key: snarkvm-ledger-committee-cache

  ledger-narwhal:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          workspace_member: ledger/narwhal
          cache_key: snarkvm-ledger-narwhal-cache

  ledger-narwhal-batch-certificate:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          workspace_member: ledger/narwhal/batch-certificate
          cache_key: snarkvm-ledger-narwhal-batch-certificate-cache

  ledger-narwhal-batch-header:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          workspace_member: ledger/narwhal/batch-header
          cache_key: snarkvm-ledger-narwhal-batch-header-cache

  ledger-narwhal-data:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          workspace_member: ledger/narwhal/data
          cache_key: snarkvm-ledger-narwhal-data-cache

  ledger-narwhal-subdag:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          workspace_member: ledger/narwhal/subdag
          cache_key: snarkvm-ledger-narwhal-subdag-cache

  ledger-narwhal-transmission:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          workspace_member: ledger/narwhal/transmission
          cache_key: snarkvm-ledger-narwhal-transmission-cache

  ledger-narwhal-transmission-id:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          workspace_member: ledger/narwhal/transmission-id
          cache_key: snarkvm-ledger-narwhal-transmission-id-cache

  ledger-puzzle:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          workspace_member: ledger/puzzle
          cache_key: snarkvm-ledger-puzzle-cache

  ledger-puzzle-epoch:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          workspace_member: ledger/puzzle/epoch
          cache_key: snarkvm-ledger-puzzle-epoch-cache

  ledger-query:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          workspace_member: ledger/query
          cache_key: snarkvm-ledger-query-cache

  ledger-store:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          flags: --features=rocks
          workspace_member: ledger/store
          cache_key: snarkvm-ledger-store-cache

  ledger-test-helpers:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          workspace_member: ledger/test-helpers
          cache_key: snarkvm-ledger-test-helpers-cache

  parameters:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: parameters
          cache_key: snarkvm-parameters-cache

  synthesizer:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          flags: --lib --bins
          workspace_member: synthesizer
          cache_key: snarkvm-synthesizer-cache

  synthesizer-integration:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          flags: --test '*'
          workspace_member: synthesizer
          cache_key: snarkvm-synthesizer-integration-cache

  synthesizer-process:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          workspace_member: synthesizer/process
          cache_key: snarkvm-synthesizer-process-cache

  synthesizer-process-with-rocksdb:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          flags: --features=rocks
          workspace_member: synthesizer/process
          cache_key: snarkvm-synthesizer-process-cache

  synthesizer-program:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          flags: --lib --bins
          workspace_member: synthesizer/program
          cache_key: snarkvm-synthesizer-program-cache

  synthesizer-program-integration:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          flags: --test '*' -- --skip keccak --skip psd --skip sha
          workspace_member: synthesizer/program
          cache_key: snarkvm-synthesizer-program-cache

  synthesizer-program-integration-keccak:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          flags: keccak --test '*'
          workspace_member: synthesizer/program
          cache_key: snarkvm-synthesizer-program-cache

  synthesizer-program-integration-psd:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          flags: psd --test '*'
          workspace_member: synthesizer/program
          cache_key: snarkvm-synthesizer-program-cache

  synthesizer-program-integration-sha:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          flags: sha --test '*'
          workspace_member: synthesizer/program
          cache_key: snarkvm-synthesizer-program-cache

  synthesizer-snark:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - run_serial:
          workspace_member: synthesizer/snark
          cache_key: snarkvm-synthesizer-snark-cache

  utilities:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: utilities
          cache_key: snarkvm-utilities-cache

  utilities-derives:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: utilities/derives
          cache_key: snarkvm-utilities-derives-cache

  wasm:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - checkout
      - setup_environment:
          cache_key: snarkvm-wasm-cache
      - run:
          no_output_timeout: 30m
          command: |
            sudo apt-get install nodejs
            curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
            cd wasm && wasm-pack test --node
            # cargo test --target wasm32-unknown-unknown
      - clear_environment:
          cache_key: snarkvm-wasm-cache

  check-fmt:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - checkout
      - install_rust_nightly
      - setup_environment:
          cache_key: snarkvm-fmt-cache
      - run:
          name: Check style
          no_output_timeout: 35m
          command: cargo +nightly fmt --all -- --check
      - clear_environment:
          cache_key: snarkvm-fmt-cache

  check-clippy:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: 2xlarge
    steps:
      - checkout
      - setup_environment:
          cache_key: snarkvm-clippy-cache
      - run:
          name: Check Clippy
          no_output_timeout: 35m
          command: |
            cargo clippy --workspace --all-targets -- -D warnings
            cargo clippy --workspace --all-targets --all-features -- -D warnings
      - clear_environment:
          cache_key: snarkvm-clippy-cache

  check-all-targets:
    docker:
      - image: cimg/rust:1.76.0 # Attention - Change the MSRV in Cargo.toml and rust-toolchain as well
    resource_class: xlarge
    steps:
      - checkout
      - setup_environment:
          cache_key: snarkvm-all-targets-cache
      - run:
          name: Check all targets
          no_output_timeout: 35m
          command: cargo check --release --workspace --all-targets
      - clear_environment:
          cache_key: snarkvm-all-targets-cache

  verify-windows:
    executor:
      name: windows/default
      size: 2xlarge
    environment:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    parameters:
      workspace_member:
        type: string
    steps:
      - check_windows:
          workspace_member: << parameters.workspace_member >>

workflows:
  version: 2

  main-workflow:
    jobs:
      - snarkvm
      - algorithms
      - algorithms-profiler
      - circuit
      - circuit-account
      - circuit-account-noconsole
      - circuit-algorithms
      - circuit-collections
      - circuit-collections-noconsole
      - circuit-environment
      - circuit-network
      - circuit-program
      - circuit-types
      - circuit-types-address
      - circuit-types-boolean
      - circuit-types-field
      - circuit-types-group
      - circuit-types-integers
      - circuit-types-scalar
      - circuit-types-string
      - console
      - console-account
      - console-algorithms
      - console-collections
      - console-network
      - console-network-environment
      - console-program
      - console-types
      - console-types-address
      - console-types-boolean
      - console-types-field
      - console-types-group
      - console-types-integers
      - console-types-scalar
      - console-types-string
      - curves
      - fields
      - ledger
# TODO (howardwu) - Implement `open_testing` on all storage, update to `CurrentConsensusStore::open_testing`, then re-enable.
#      - ledger-with-rocksdb
      - ledger-with-valid-solutions
      - ledger-authority
      - ledger-block
      - ledger-committee
      - ledger-narwhal
      - ledger-narwhal-batch-certificate
      - ledger-narwhal-batch-header
      - ledger-narwhal-data
      - ledger-narwhal-subdag
      - ledger-narwhal-transmission
      - ledger-narwhal-transmission-id
      - ledger-puzzle
      - ledger-puzzle-epoch
      - ledger-query
      - ledger-store
      - ledger-test-helpers
      - parameters
      - synthesizer
      - synthesizer-integration
      - synthesizer-process
      - synthesizer-process-with-rocksdb
      - synthesizer-program
      - synthesizer-program-integration
      - synthesizer-program-integration-keccak
      - synthesizer-program-integration-psd
      - synthesizer-program-integration-sha
      - synthesizer-snark
      - utilities
      - utilities-derives
      - wasm
      - check-fmt
      - check-clippy
      - check-all-targets

  windows-workflow:
    jobs:
      - verify-windows:
          matrix:
            parameters:
              workspace_member: [
                algorithms,
                circuit,
                console,
                curves,
                fields,
                ledger,
                parameters,
                synthesizer,
                utilities,
              ]
